,data=tmp$temperature){
X<-data[de_a[1],de_a[2]]
if (log{
X<-log(X)}
if (inverse){
X<-rev(X)} #inverser les donnés
if (lag){
X<-diff(X,lag = lag)} mettre un lag au donnés
if (dif){
X<- diff(X,differences = diff)}
plot_d<<- xts::xts(tmp$temperature, order.by=as.POSIXct(tmp$dateheure))
return(X)}
#cette fonction eveite la repetion de code pour chauqe fois on apple une partie de donnés
#et aussi s'on utlise la differnce ou une tendece ou un varaince
main_data <- function(inverse=F,log=F,diff=0,lag=0,n_dif=1,de_a=c(1,2448)
,data=tmp$temperature){
X<-data[de_a[1],de_a[2]]
if (log){
X<-log(X)}
if (inverse){
X<-rev(X)} #inverser les donnés
if (lag){
X<-diff(X,lag = lag)} mettre un lag au donnés
if (dif){
X<- diff(X,differences = diff)}
plot_d<<- xts::xts(tmp$temperature, order.by=as.POSIXct(tmp$dateheure))
return(X)}
#cette fonction eveite la repetion de code pour chauqe fois on apple une partie de donnés
#et aussi s'on utlise la differnce ou une tendece ou un varaince
main_data <- function(inverse=F,log=0,diff=0,lag=0,n_dif=1,de_a=c(1,2448)
,data=tmp$temperature){
X<-data[de_a[1],de_a[2]]
if (log){
X<-log(X)}
if (inverse){
X<-rev(X)} #inverser les donnés
if (lag){
X<-diff(X,lag = lag)} mettre un lag au donnés
if (dif){
X<- diff(X,differences = diff)}
plot_d<<- xts::xts(tmp$temperature, order.by=as.POSIXct(tmp$dateheure))
return(X)}
#cette fonction eveite la repetion de code pour chauqe fois on apple une partie de donnés
#et aussi s'on utlise la differnce ou une tendece ou un varaince
main_data <- function(inverse=F,log=0,diff=0,lag=0,n_dif=1,de_a=c(1,2448)
,data=tmp$temperature){
X<-data[de_a[1],de_a[2]]
if (log){
X<-log(X)}
if (inverse){
X<-rev(X)} #inverser les donnés
if (lag){
X<-diff(X,lag = lag)} #mettre un lag au donnés
if (dif){
X<- diff(X,differences = diff)}
plot_d<<- xts::xts(tmp$temperature, order.by=as.POSIXct(tmp$dateheure))
return(X)}
#voir s'il y a un sesanolite plus pret
#on predre deux les donnés de 2 jour ou 3 jour
data_2j<- main_data
data_2j
print(data_2j)
#voir s'il y a un sesanolite plus pret
#on predre deux les donnés de 2 jour ou 3 jour
data_2j<- main_data()
#voir s'il y a un sesanolite plus pret
#on predre deux les donnés de 2 jour ou 3 jour
data_2j<- main_data()
#voir s'il y a un sesanolite plus pret
#on predre deux les donnés de 2 jour ou 3 jour
data_2j<- main_data(de_a=c(1,16))
#voir s'il y a un sesanolite plus pret
#on predre deux les donnés de 2 jour ou 3 jour
data_2j<- main_data(de_a=c(1,16))
#cette fonction eveite la repetion de code pour chauqe fois on apple une partie de donnés
#et aussi s'on utlise la differnce ou une tendece ou un varaince
main_data <- function(inverse=F,log=0,diff=0,lag=0,n_dif=1,de_a=c(1,2448)
,data=tmp$temperature){
X<-data[de_a[1]:de_a[2]]
if (log){
X<-log(X)}
if (inverse){
X<-rev(X)} #inverser les donnés
if (lag){
X<-diff(X,lag = lag)} #mettre un lag au donnés
if (dif){
X<- diff(X,differences = diff)}
plot_d<<- xts::xts(tmp$temperature, order.by=as.POSIXct(tmp$dateheure))
return(X)}
#voir s'il y a un sesanolite plus pret
#on predre deux les donnés de 2 jour ou 3 jour
data_2j<- main_data(de_a=c(1,16))
#cette fonction eveite la repetion de code pour chauqe fois on apple une partie de donnés
#et aussi s'on utlise la differnce ou une tendece ou un varaince
main_data <- function(inverse=F,log=0,diff=0,lag=0,de_a=c(1,2448),data=tmp$temperature){
X<-data[de_a[1]:de_a[2]]
if (log){
X<-log(X)}
if (inverse){
X<-rev(X)} #inverser les donnés
if (lag){
X<-diff(X,lag = lag)} #mettre un lag au donnés
if (dif){
X<- diff(X,differences = diff)}
plot_d<<- xts::xts(tmp$temperature, order.by=as.POSIXct(tmp$dateheure))
return(X)}
#voir s'il y a un sesanolite plus pret
#on predre deux les donnés de 2 jour ou 3 jour
data_2j<- main_data(de_a=c(1,16))
#cette fonction eveite la repetion de code pour chauqe fois on apple une partie de donnés
#et aussi s'on utlise la differnce ou une tendece ou un varaince
main_data <- function(inverse=F,log=0,diff=0,lag=0,de_a=c(1,2448),data=tmp$temperature){
X<-data[de_a[1]:de_a[2]]
if (log){
X<-log(X)}
if (inverse){
X<-rev(X)} #inverser les donnés
if (lag){
X<-diff(X,lag = lag)} #mettre un lag au donnés
if (diff){
X<- diff(X,differences = diff)}
plot_d<<- xts::xts(tmp$temperature, order.by=as.POSIXct(tmp$dateheure))
return(X)}
#voir s'il y a un sesanolite plus pret
#on predre deux les donnés de 2 jour ou 3 jour
data_2j<- main_data(de_a=c(1,16))
data_2j
#cette fonction eveite la repetion de code pour chauqe fois on apple une partie de donnés
#et aussi s'on utlise la differnce ou une tendece ou un varaince
main_data <- function(inverse=F,log=0,diff=0,lag=0,de_a=c(1,2448),data=tmp$temperature){
X<-data[de_a[1]:de_a[2]]
if (log){
X<-log(X)}
if (inverse){
X<-rev(X)} #inverser les donnés
if (lag){
X<-diff(X,lag = lag)} #mettre un lag au donnés
if (diff){
X<- diff(X,differences = diff)}
plot_d<<- xts::xts(X, order.by=as.POSIXct(tmp$dateheure))
return(X)}
#cette fonction eveite la repetion de code pour chauqe fois on apple une partie de donnés
#et aussi s'on utlise la differnce ou une tendece ou un varaince
main_data <- function(inverse=F,log=0,diff=0,lag=0,de_a=c(1,2448),data=tmp$temperature){
X<-data[de_a[1]:de_a[2]]
if (log){
X<-log(X)}
if (inverse){
X<-rev(X)} #inverser les donnés
if (lag){
X<-diff(X,lag = lag)} #mettre un lag au donnés
if (diff){
X<- diff(X,differences = diff)}
plot_d<<- xts::xts(X, order.by=as.POSIXct(tmp$dateheure))
return(X)}
#voir s'il y a un sesanolite plus pret
#on predre deux les donnés de 2 jour ou 3 jour
data_2j<- main_data(de_a=c(1,16))
#cette fonction eveite la repetion de code pour chauqe fois on apple une partie de donnés
#et aussi s'on utlise la differnce ou une tendece ou un varaince
main_data <- function(inverse=F,log=0,diff=0,lag=0,de_a=c(1,2448),data=tmp){
P<-data$dateheure[de_a[1]:de_a[2]]
X<-data$temperature[de_a[1]:de_a[2]]
if (log){
X<-log(X)}
if (inverse){
X<-rev(X)} #inverser les donnés
if (lag){
X<-diff(X,lag = lag)} #mettre un lag au donnés
if (diff){
X<- diff(X,differences = diff)}
plot_d<<- xts::xts(X, order.by=as.POSIXct(tmp$dateheure))
return(X)}
#voir s'il y a un sesanolite plus pret
#on predre deux les donnés de 2 jour ou 3 jour
data_2j<- main_data(de_a=c(1,16))
#cette fonction eveite la repetion de code pour chauqe fois on apple une partie de donnés
#et aussi s'on utlise la differnce ou une tendece ou un varaince
main_data <- function(inverse=F,log=0,diff=0,lag=0,de_a=c(1,2448),data=tmp){
P<-data$dateheure[de_a[1]:de_a[2]]
X<-data$temperature[de_a[1]:de_a[2]]
if (log){
X<-log(X)}
if (inverse){
X<-rev(X)} #inverser les donnés
if (lag){
X<-diff(X,lag = lag)} #mettre un lag au donnés
if (diff){
X<- diff(X,differences = diff)}
plot_d<<- xts::xts(X, order.by=as.POSIXct(P))
return(X)}
#voir s'il y a un sesanolite plus pret
#on predre deux les donnés de 2 jour ou 3 jour
data_2j<- main_data(de_a=c(1,16))
plot_d
#cette fonction eveite la repetion de code pour chauqe fois on apple une partie de donnés
#et aussi s'on utlise la differnce ou une tendece ou un varaince
main_data <- function(inverse=F,log=0,diff=0,lag=0,de_a=c(1,2448),data=tmp){
P<-data$dateheure[de_a[1]:de_a[2]]
X<-data$temperature[de_a[1]:de_a[2]]
if (log){
X<-log(X)}
if (inverse){
X<-rev(X)} #inverser les donnés
if (lag){
X<-diff(X,lag = lag)} #mettre un lag au donnés
if (diff){
X<- diff(X,differences = diff)}
plot_X<<-  plot(xts::xts(X, order.by=as.POSIXct(P)))
return(X)}
#voir s'il y a un sesanolite plus pret
#on predre deux les donnés de 2 jour ou 3 jour
data_2j<- main_data(de_a=c(1,16))
plot_d
plot_d
plot_d
plot(plot_d)
plot_X
temperature <- xts::xts(tmp$temperature, order.by=as.POSIXct(tmp$dateheure))
plot(temperature)
plot_X
#cette fonction eveite la repetion de code pour chauqe fois on apple une partie de donnés
#et aussi s'on utlise la differnce ou une tendece ou un varaince
main_data <- function(inverse=F,log=0,diff=0,lag=0,de_a=c(1,2448),data=tmp){
P<-data$dateheure[de_a[1]:de_a[2]]
X<-data$temperature[de_a[1]:de_a[2]]
if (log){
X<-log(X)}
if (inverse){
X<-rev(X)} #inverser les donnés
if (lag){
X<-diff(X,lag = lag)} #mettre un lag au donnés
if (diff){
X<- diff(X,differences = diff)}
plot_X<-  xts::xts(X, order.by=as.POSIXct(P))
plot_x<<-plot(plot_X)
return(X)}
#voir s'il y a un sesanolite plus pret
#on predre deux les donnés de 2 jour ou 3 jour
data_2j<- main_data(de_a=c(1,16))
plot_X
#cette fonction eveite la repetion de code pour chauqe fois on apple une partie de donnés
#et aussi s'on utlise la differnce ou une tendece ou un varaince
main_data <- function(inverse=F,log=0,diff=0,lag=0,de_a=c(1,2448),data=tmp){
P<-data$dateheure[de_a[1]:de_a[2]]
X<-data$temperature[de_a[1]:de_a[2]]
if (log){
X<-log(X)}
if (inverse){
X<-rev(X)} #inverser les donnés
if (lag){
X<-diff(X,lag = lag)} #mettre un lag au donnés
if (diff){
X<- diff(X,differences = diff)}
temperature<-  xts::xts(X, order.by=as.POSIXct(P))
plot_X<<-plot(temperature)
return(X)}
#voir s'il y a un sesanolite plus pret
#on predre deux les donnés de 2 jour ou 3 jour
data_2j<- main_data(de_a=c(1,16))
plot_X
#voir s'il y a un sesanolite plus pret
#on predre deux les donnés de 2 jour ou 3 jour
data_2j<- main_data(de_a=c(1,24))
plot_X
#voir s'il y a un sesanolite plus pret
#on predre deux les donnés de 2 jour ou 3 jour
data_2j<- main_data(de_a=c(1,16))
plot_X
#on voit une repettion chaque jour avec des petites varabilité
#et s'on fait pout 4 jour
data_4j<- main_data(de_a=c(1,16))
#on voit une repettion chaque jour avec des petites varabilité
#et s'on fait pout 4 jour
data_4j<- main_data(de_a=c(1,32))
plot_X
#on voit une repettion chaque jour avec des petites varabilité
#et s'on fait pout 4 jour
data_4j<- main_data(de_a=c(1,8))
plot_X
#on voit une repettion chaque jour avec des petites varabilité
#et s'on fait pout 4 jour
data_4j<- main_data(de_a=c(1,32))
plot_X
#on voit une repettion chaque jour avec des petites varabilité
#et s'on fait pout 4 jour
data_4j<- main_data(de_a=c(1,16))
plot_X
#on voit une repettion chaque jour avec des petites varabilité
#et s'on fait pout 4 jour
data_4j<- main_data(de_a=c(1,32))
plot_X
help(acf)
#deja on va voir la autocorlation
acf(tmp,na.action = na.fail())
#deja on va voir la autocorlation
acf(tmp$temperature,na.action = na.fail())
#deja on va voir la autocorlation
acf(tmp$temperature,na.action = na.fai)
#deja on va voir la autocorlation
acf(tmp$temperature,na.action = na.fail)
#deja on va voir la autocorlation
acf(tmp$temperature ,plot = TRUE, na.action = na.fail)
#deja on va voir la autocorlation
acf(tmp$temperature ,plot = TRUE, na.action = na.pass)
#deja on va voir la autocorlation
acf(tmp$temperature ,plot = TRUE, na.action = na.pass,lag.max = 16)
#deja on va voir la autocorlation
acf(tmp$temperature ,plot = TRUE, na.action = na.pass,lag.max = 32)
test_fonc(tmp)
test_fonc<- function(X){
test_fonc<- function(X){
KPSS <- kpss.test(X, null="Level")  # Test de KPSS
ADF$p.value < 0.05                  # Renvoie true donc stationnaire
KPSS$p.value >= 0.05                # Renvoie true donc stationnaire
return(sprintf("ADF test donne s% pour stastionarité et test KPSS donne %s pour la stastionarité"
test_fonc<- function(X){
test_fonc<- function(X){
test_fonc=function(X){
test_fonc=function(X){
KPSS <- kpss.test(X, null="Level")  # Test de KPSS
ADF$p.value < 0.05                  # Renvoie true donc stationnaire
KPSS$p.value >= 0.05                # Renvoie true donc stationnaire
return(sprintf("ADF test donne s% pour stastionarité et test KPSS donne %s pour la stastionarité"
test_fonc(tmp)
test_fonc<-function(data){
test_fonc<-function(data){
KPSS <- kpss.test(data, null="Level")  # Test de KPSS
ADF$p.value < 0.05                  # Renvoie true donc stationnaire
KPSS$p.value >= 0.05                # Renvoie true donc stationnaire
return(sprintf("ADF test donne s% pour stastionarité et test KPSS donne %s pour la stastionarité"
test_fonc(tmp)
test_fonc<-function(data){
test_fonc<-function(data){
test_fonc<-function(data){
test_fonc<-function(data){
KPSS <- kpss.test(data, null="Level")
return(sprintf("ADF test donne s% pour stastionarité et test KPSS donne %s pour la stastionarité"
}
test_fonc<-function(data){
test_fonc<-function(data){
ADF <- adf.test(data)
KPSS <- kpss.test(data, null="Level")
return(sprintf("ADF test donne s% pour stastionarité et test KPSS donne %s pour la stastionarité"
}
test_fonc<-function(data){
test_fonc<-function(data){
test_fonc <-function(data){
ADF <- adf.test(data)
KPSS <- kpss.test(data, null="Level")
return(sprintf("ADF test donne s% pour stastionarité et test KPSS donne %s pour la stastionarité"
}
test_fonc <-function(data){
test_fonc <- function(data){
KPSS <- kpss.test(data, null="Level")
return(sprintf("ADF test donne s% pour stastionarité et test KPSS donne %s pour la stastionarité"
}
test_fonc <- function(data){
test_fonc <- function(data){
print("eddd")
}
test_fonc(tmp)
sdqsdsq
test_fonc <- function(data){
KPSS <- kpss.test(data, null="Level")
return(sprintf("ADF test donne s% pour stastionarité et test KPSS donne %s pour la stastionarité"
}
sdqsdsq
test_fonc <- function(data){
print("dsfs")
}
test_fonc(tmp)
test_fonc <- function(data){
ADF <- adf.test(data)
print("dsfs")
}
test_fonc(tmp)
#test la stastionatité
library("tseries")
test_fonc <- function(data){
ADF <- adf.test(data)
print("dsfs")
}
test_fonc(tmp)
test_fonc(tmp$temperature)
?adf.test
test_fonc(data_2j)
sdqsdsq
test_fonc <- function(data){
ADF <- adf.test(data)
KPSS <- kpss.test(data, null="Level")
print("dsfs")
}
test_fonc(data_2j)
test_fonc <- function(data){
test_fonc <- function(data){
ADF <- adf.test(data)
KPSS <- kpss.test(data, null="Level")
print("dsfs")
}
test_fonc(data_2j)
?adf.test
test_fonc(data_2j)
test_fonc(wxdata_2j)
?adf.test
#test la stastionatité
library("tseries")
test_fonc <- function(data){
ADF <- adf.test(data)
KPSS <- kpss.test(data, null="Level")
print("dsfs")
}
fdsf
ve"é'eé"v
fdfdf
test_fonc <- function(data){
ADF <- adf.test(data)
KPSS <- kpss.test(data, null="Level")
print("dsfs")
}
test_fonc(wxdata_2j)
test_fonc(data_2j)
test_fonc <- function(data){
"éé&ede"
dsfds
r"é'"
sprintf("ADF test donne s% pour stastionarité et test KPSS donne %s pour la stastionarité",c(ADF$p.value < 0.05 , KPSS$p.value >= 0.05 ))
"ée"
test_fonc <- function(data){
ADF <- adf.test(data)
KPSS <- kpss.test(data, null="Level")
return(sprintf("ADF test donne s% pour stastionarité et
test KPSS donne %s pour la stastionarité",
c(ADF$p.value < 0.05 , KPSS$p.value >= 0.05 )))
print("dsfs")
}
test_fonc(data_2j)
test_fonc <- function(data){
ADF <- adf.test(data)
KPSS <- kpss.test(data, null="Level")
return(sprintf("ADF test donne %s pour stastionarité et
test KPSS donne %s pour la stastionarité",
c(ADF$p.value < 0.05 , KPSS$p.value >= 0.05 )))
print("dsfs")
}
test_fonc(data_4j)
test_fonc <- function(data){
ADF <- adf.test(data)
KPSS <- kpss.test(data, null="Level")
return(sprintf("ADF test donne %s pour stastionarité et test KPSS donne %s pour la stastionarité",
c(ADF$p.value < 0.05 , KPSS$p.value >= 0.05 )))
print("dsfs")
}
test_fonc(data_4j)
?sprintf
test_fonc <- function(data){
ADF <- adf.test(data)
KPSS <- kpss.test(data, null="Level")
return(sprintf("ADF test donne %d pour stastionarité et test KPSS donne %d pour la stastionarité",
c(ADF$p.value < 0.05 , KPSS$p.value >= 0.05 )))
print("dsfs")
}
test_fonc(data_4j)
test_fonc <- function(data){
KPSS <- kpss.test(data, null="Level")
return(sprintf("ADF test donne %d pour stastionarité et test KPSS donne %d pour la stastionarité",
(ADF$p.value < 0.05 , KPSS$p.value >= 0.05 ))
print("dsfs")
}
test_fonc(data_4j)
sprintf("ADF test donne s% pour stastionarité et test KPSS donne %s pour la stastionarité",c(ADF$p.value < 0.05 , KPSS$p.value >= 0.05 ))
?sprintf
test_fonc <- function(data){
ADF <- adf.test(data)
KPSS <- kpss.test(data, null="Level")
return(sprintf("ADF test donne %d pour stastionarité et test KPSS donne %d pour la stastionarité",
(ADF$p.value < 0.05 , KPSS$p.value >= 0.05 )))
print("dsfs")
}
test_fonc(data_4j)
test_fonc <- function(data){
ADF <- adf.test(data)
KPSS <- kpss.test(data, null="Level")
return(sprintf("ADF test donne %d pour stastionarité et test KPSS donne %d pour la stastionarité",
ADF$p.value < 0.05 , KPSS$p.value >= 0.05 ))
print("dsfs")
}
test_fonc(data_4j)
test_fonc <- function(data){
ADF <- adf.test(data)
KPSS <- kpss.test(data, null="Level")
return(sprintf("ADF test donne %s pour stastionarité et test KPSS donne %d pour la stastionarité",
ADF$p.value < 0.05 , KPSS$p.value >= 0.05 ))
print("dsfs")
}
test_fonc(data_4j)
test_fonc <- function(data){
ADF <- adf.test(data)
KPSS <- kpss.test(data, null="Level")
return(sprintf("le test ADF donne %s pour stastionarité et le test KPSS donne %d pour la stastionarité",
ADF$p.value < 0.05 , KPSS$p.value >= 0.05 ))
print("dsfs")
}
test_fonc(data_4j)
test_(data_4j)
test_ <- function(data){
ADF <- adf.test(data)
KPSS <- kpss.test(data, null="Level")
return(sprintf("le test ADF donne %s pour stastionarité et le test KPSS donne %d pour la stastionarité",
ADF$p.value < 0.05 , KPSS$p.value >= 0.05 ))
}
test_(data_4j)
